input sizeInputInput{
 height: Int
  width: Int
   length: Int
}
type sizeInputType{
 height: Int
  width: Int
   length: Int
}
type ProductSize {
  size:sizeInputType
  price: Float
}

input ProductSizeInput {
   size:sizeInputInput
   price: Float
}
input doorSizeInput {
   size:sizeInputInput
   price: Float
}


# type Dimension {
#   unit: String
#   value: String
# }

# input DimensionInput {
#   unit: String
#   value: String
# }

extend type Product {
  door: [Product]
  unit: [Product]
  drawer: [Product]
  accessories: Product
  productType: String
  availableSizes: [ProductSize]
  compatibleSizes: [ProductSize]
  unitType:String
  
}

extend type ProductVariant {
  size: ProductSize
  productType: String
    availableSizes: [ProductSize]
  compatibleSizes: [ProductSize]
   unitType:String
}

extend input ProductInput {
    availableSizes: [ProductSizeInput]
  compatibleSizes: [ProductSizeInput]
  unitType:String
  
}
extend input ProductVariantInput  {
    availableSizes: [ProductSizeInput]
  compatibleSizes: [ProductSizeInput]
   unitType:String
  
}
extend type CatalogProductVariant {
    door: [Product]
  unit: [Product]
  drawer: [Product]
  accessories: Product
  productType: String
  availableSizes: [ProductSize]
  compatibleSizes: [ProductSize]
   unitType:String
}

extend type Query{
  getDoorsByUnitID(slug:String,unitType:String):[CatalogProduct]
}
